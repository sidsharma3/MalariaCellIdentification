# -*- coding: utf-8 -*-
"""MalariaCellIdentification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzVIsn_anslKeQb036p4qLStaNbF_l35
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

parasitized_data = os.listdir('/gdrive/My Drive/Cell Data/positivetrain/')
print(parasitized_data[:10]) #the output we get are the .png files

uninfected_data = os.listdir('/gdrive/My Drive/Cell Data/negativetrain/')
print('\n')
print(uninfected_data[:10])

trainingdata = []
categories = ["positivetrain", "negativetrain"]

for index in categories:
  for img in os.listdir("/gdrive/My Drive/Cell Data/" + index):
    img_array = cv2.imread("/gdrive/My Drive/Cell Data/" + index + "/" + img)
    new_array = cv2.resize(img_array, (50, 50)) 
    if index == "positivetrain":
      trainingdata.append([new_array, 1])
    else:
      trainingdata.append([new_array, 0])

import random
print(len(trainingdata))
random.shuffle(trainingdata)

import numpy as np
data = []
label = []

for feature, labels in trainingdata:
  data.append(feature)
  label.append(labels)
  
data = np.array(data).reshape(-1, 50, 50, 3)
data = data/255.0

print(len(data))
print(len(label))

plt.imshow(data[0])
plt.show()
print(label[0])

import keras
from keras.layers import Dense, Conv2D
from keras.layers import Flatten
from keras.layers import MaxPooling2D
from keras.layers import Activation
from keras.layers import BatchNormalization
from keras.layers import Dropout
from keras.models import Sequential
from keras import backend as K

from keras import optimizers

model = Sequential()

model.add(Conv2D(64, (3, 3), input_shape=data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Flatten())  

model.add(Dense(512, activation = 'relu'))

model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.fit(data, label, batch_size=32, epochs=40, validation_split=0.3)



